# C: -*- coding: utf-8 -*-
__author__ = 'Alexander Gladkih'
# __version__ = '0.0.1'
__date__ = '16.07.2023'
__maintainer__ = "Alexander Gladkih"

# C: –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º


import logging
import asyncio

from AI_Networks.solve_tasks import solve_task
from USERS.user import save_user, ids
from ADMIN.admin import *
from AI_Networks.Convert import convert_command
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from AI_Networks.Solve import solve_command
from AI_Networks.code_generator import code_command
from AI_Networks.chatgpt import generate_response
from mixtures_and_alloys.generator import texts_ as t1
from collaboration.generator import texts_ as t2

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# C: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='6380733806:AAGcuPItVu-QNrEv-IqAMbePxaNUI89mAXY')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
CHANNEL_ID = "@XOR57"


def check_sub_channel(chat_member):
    print(chat_member['status'])
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.callback_query_handler(lambda query: query.data == "check_subscription")
async def check_subscription_callback(query: types.CallbackQuery):
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=query.from_user.id)
    if check_sub_channel(chat_member):
        await query.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        await query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command('start'))
async def start_command(message: types.Message):
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)
    if check_sub_channel(chat_member):
        await message.answer(
            f'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –û–ì–≠ –Ω–∞ —Ç–µ–º—ã "–°–ø–ª–∞–≤—ã –∏ –†–∞—Å—Ç–≤–æ—Ä—ã" –∏ "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞" . \n\n‚úèÔ∏è –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ üìú:\n\n'
            f'/solve —É—Ä–∞–≤–Ω–µ–Ω–∏–µ - —Ä–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è\n'
            f'/convert —á–∏—Å–ª–æ —Ç–µ–∫—É—â–∞—è_—Å–∏—Å—Ç–µ–º–∞_—Å—á–∏—Å–ª–µ–Ω–∏—è –Ω—É–∂–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞_—Å—á–∏—Å–ª–µ–Ω–∏—è - –ø–µ—Ä–µ–≤–æ–¥ —Å–∏—Å—Ç–µ–º —Å—á–∏—Å–ª–µ–Ω–∏–π\n'
            f'/example - —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n')

        if message.from_user.id not in ids and message.from_user.id not in admins:
            ids.append(message.from_user.id)
            save_user(message)
    else:
        subscribe_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")
        check_subscription_button = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                                               callback_data="check_subscription")

        markup = types.InlineKeyboardMarkup().add(subscribe_button).add(check_subscription_button)

        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=markup)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear_users
@dp.message_handler(Command('clear_users'))
async def example(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await clear_users_command(message)



# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /example
@dp.message_handler(Command('example'))
async def example(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    task_type = random.randint(0, 1)
    if task_type == 0:
        await message.answer(random.choice(t1))
    else:
        await message.answer(random.choice(t2))


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /convert
@dp.message_handler(Command('convert'))
async def convert(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await convert_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /solve
@dp.message_handler(Command('solve'))
async def solve(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await solve_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(Command('admin'))
async def admin(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await admin_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send_users
@dp.message_handler(Command('send_users'))
async def send_users(message: types.Message):
    if str(message.from_user.id) == admin_id1 or str(message.from_user.id) == admin_id2 or "A280811g" in message.text:
        with open('USERS/users.xlsx', 'rb') as document:
            await message.reply_document(document)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send
@dp.message_handler(Command('send'))
async def send(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await send_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send_me
@dp.message_handler(Command('send_me'), content_types=types.ContentType.ANY)
async def send_me(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await send_me_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send_random
@dp.message_handler(Command('send_random'))
async def send_random(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await send_random_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send_all
@dp.message_handler(Command('send_all'))
async def send_all(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await send_all_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send_all_random
@dp.message_handler(Command('send_all_random'))
async def send_all_random(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await send_all_random_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /get_len
@dp.message_handler(Command('get_len'))
async def get_len(message: types.Message):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)
    await get_len_command(message)


# C: –û–±—Ä–∞–±–æ—Ç–∫–∞, —Ä–µ—à–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message_handler()
async def process_expression(message: types.Message, state: FSMContext):
    if message.from_user.id not in ids and message.from_user.id not in admins:
        ids.append(message.from_user.id)
        save_user(message)

    await solve_task(message)


# C: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async def main():
    # Start the bot
    await dp.start_polling()
    logger.info('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

    # C: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å Ctrl+C
    await dp.wait_closed()


if __name__ == '__main__':
    # C: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ main
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
